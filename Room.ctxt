#BlueJ class context
comment0.params=title\ description
comment0.target=Room(java.lang.String,\ java.lang.String)
comment0.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ @param\ description\ The\ room's\ description.\r\n
comment1.params=
comment1.target=java.lang.String\ getTitle()
comment1.text=\r\n\ Return\ title\ of\ room\r\n\ @return\ Room's\ title\r\n
comment10.params=itemName
comment10.target=boolean\ contains(java.lang.String)
comment10.text=\r\n\ Tells\ whether\ the\ room\ contains\ an\ object\ or\ not\r\n\ @param\ String\ name\ of\ item\r\n\ @return\ boolean\ contains\ item\ or\ not\r\n
comment11.params=itemName
comment11.target=Item\ getItem(java.lang.String)
comment11.text=\r\n\ Returns\ the\ item\ without\ removing\ it\ from\ room\r\n\ @param\ String\ name\ of\ item\r\n\ @return\ Item\ if\ it\ exists/is\ in\ room\r\n
comment12.params=aItem
comment12.target=void\ store(Item)
comment12.text=\r\n\ Adds\ an\ item\ to\ the\ room\ if\ it\ is\ not\ already\ in\ the\ room\r\n\ @param\ Item\ to\ be\ stored\r\n
comment13.params=itemName
comment13.target=Item\ remove(java.lang.String)
comment13.text=\r\n\ Removes\ item\ from\ the\ room\ and\ returns\ it\r\n\ @return\ Item\ with\ name\ requested\r\n
comment14.params=
comment14.target=boolean\ meetsRequirements()
comment14.text=\r\n\ Returns\ whether\ the\ room\ meets\ the\r\n\ requirements\ to\ enter\r\n\ @return\ boolean\ saying\ if\ you\ can\ enter\r\n
comment15.params=
comment15.target=java.lang.String\ getRequirements()
comment15.text=\r\n\ Returns\ the\ requirements\ to\ enter.\r\n\ There\ shouldn't\ be\ requirements\ to\ enter\ Room\ class,\r\n\ but\ the\ child\ classes\ might\ have\ some\r\n\ @return\ String\ for\ troubleshooting\r\n
comment2.params=
comment2.target=java.lang.String\ look()
comment2.text=\r\n\ Get\ content\ description\ for\ looking\ around\ room\r\n\ @return\ String\ two\ lines\ with\ exits\ and\ items\ in\ room\r\n
comment3.params=
comment3.target=java.lang.String\ getShortDescription()
comment3.text=\r\n\ @return\ The\ short\ description\ of\ the\ room\r\n\ (the\ one\ that\ was\ defined\ in\ the\ constructor).\r\n
comment4.params=
comment4.target=java.lang.String\ getLongDescription()
comment4.text=\r\n\ Return\ a\ description\ of\ the\ room\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n\ @return\ A\ long\ description\ of\ this\ room\r\n
comment5.params=direction\ neighbor
comment5.target=void\ setExit(java.lang.String,\ Room)
comment5.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n\ @param\ direction\ The\ direction\ of\ the\ exit.\r\n\ @param\ neighbor\ \ The\ room\ to\ which\ the\ exit\ leads.\r\n
comment6.params=
comment6.target=java.lang.String\ getExitString()
comment6.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\r\n\ "Exits\:\ north\ west".\r\n\ @return\ String\ of\ room's\ exits\r\n
comment7.params=
comment7.target=java.lang.String[]\ getExitDirections()
comment7.text=\r\n\ Provides\ array\ of\ exits\ determined\ by\ the\ keys\ of\ exits\ HashMap\r\n\ @return\ Array\ containing\ available\ exit\ directions\r\n
comment8.params=direction
comment8.target=Room\ getExit(java.lang.String)
comment8.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\ @param\ direction\ The\ exit's\ direction.\r\n\ @return\ The\ room\ in\ the\ given\ direction.\r\n
comment9.params=
comment9.target=java.lang.String\ listItems()
comment9.text=\r\n\ Returns\ list\ of\ items\ contained\ in\ room.\r\n\ @return\ String\ listing\ items\ in\ room.\r\n
numComments=16
